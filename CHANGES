	1. Implemented

PC001:  2016-09-16
  Change label evaluation to only occur after all parsing instead of evaluating
  immediately in case the specific label has already been parsed.
PC002:  2016-09-16
  Make label redefinition into a parsing/compiler error.
PC003:  2016-09-16
  Change cpy to mov. mov makes more sense traditionally for this specific function
  and I want cpy freed for something in the future regarding memory access since
  it feels more appropriate for that.
PC005:  2016-09-16
  Since PC004 solves the possible problem of needing to separate regular 'jumping'
  labels from function labels, the def instruction will be deprecated in favor of
  just lab.
PC015:  2016-09-16
  Remove any restriction on code size and make everything dynamic. I can afford to
  just append at each new instruction in the parsing step.
PC014:  2016-09-16
  Make it so referencing an undefined label OR a label for the 0-th address is
  a compilation error and make sure the compilation error prints the line at fault.
PC016:  2016-09-16
  Make it so compilation errors are file aware.
PC017:  2016-09-16
  Make it so label evaluation happens with a function call after parsing files.
PC004:  2016-09-16
  Allow multiple files. The first file is where execution begins, and each subse-
  quent file acts as if appended to the first one. This allows for continuation of
  execution through files, but it's intended to allow for function labels defined
  in other files to be easily accessible with the current design.
PC013:  2016-09-16
  Make it so the nop instruction actually compiles into nothing.
PC006:  2016-09-16
  Deprecate lab label definition in favor of the "<name>:" syntax. In the switch
  for the first word in the line, the default case should be changed to check if
  the last byte of the word equals ':', if so, do the same thing "lab" does except
  instead of a second word, use every byte but the last one of the first word.
  Note that because of how parsing works, any instructions on the same line as the
  label will be treated as comments.
PC010:  2016-09-16
  Implement a set of mathematical functions as instructions.
  abs reg     Absolute value
  sqr reg     Square root
  sin reg     Sine
  cos reg     Cosine
  tan reg     Tangent
  exp reg     Exponential
  log reg     Natural logarithm
  gam reg     Gamma
  pow reg reg Sets b to the value of b^a
  pwa reg reg Sets b to the value of a^b
  These should be implemented as basic function calls to the math stdlib module.
PC019:  2016-09-16
  This PC specifies a binary format.
  The current way things work, global values are set during parsing so that they
  can be used by the runtime, namely the data stack. This data needs to be passed
  to the binary file.
  The encoding is little endian as opposed to big endian so that the files are smaller :)
  Here's the binary format:
  First 8 bytes: int64 header, currently equal to 10002.
  Next 8 bytes: size of the code.
  Variable size section containing all of the binary code.
  Next 8 bytes: int64 containing the size of the data stack.
  Variable size section containing all strings of the data stack, all ended
  by a '\n' byte.
PC018:  2016-09-16
  This PC specifies compilation and execution steps.
  Separate compilation and execution.
  For compilation into a binary bytecode file do:
  govm compile binary_name main.gs [other source files]
  For execution run:
  govm binary_name [arguments]
  This depends on PC019.
PC008:  2016-09-16
  Implement a provisionary way to access argument calls. Becaause of the current
  instruction set should only allow double precision numbers, since for strings
  the only possible functionality would be to echo them.
  This is to be done through an instruction not as general as "arg" since that
  should be reserved for a more general way to handle command line arguments.
  The instructions should be `rad` which stands for "Retrieve Argument as Double"
  where the first argument is a register holding the index of the argument and
  the second argument is the destination register.
  Also the general instruction `rac` which stands for "Retrieve Argument Count"
  will be implemented such that it's first argument is the register to receive
  the argument count.
  This depends on PC018.
PC020:  2016-09-17
  Make it so the exit from getLiteral and getRegister in compiler.go become
  actual compiler errors that report file name and line number.
PC021:  2016-09-17
  Remove all panic calls.
PC023:  2016-09-17
  Add other jump instructions.
  jge idx     Jump if greater or equal
  jle idx     Jump if less or equal
  jne idx     Jump if not equal

  2. Discarded

PC007:  Needs more detail
  Change parsing into compilation of a bytecode binary file.
PC009:  Not an actual change
  Not a language change but change the convention for function calls so that the
  first four values passed to a function to be in the %0, %1, %2 and %3 registers
  respectively.

	3. Proposed

PC011:
  Having stack frame manipulation in mind the instructions adl and sul should be
  added in order to facilitate allocation of compile time sizes.
  adl	lit	reg		reg := reg + lit
  sul	lit	reg		reg := reg - lit
PC012:
  Implements general stack based memory access.
  A new memory stack is implemented.
  Two new registers '%b' and '%c' are added for the purposes of stack manipulation.
  The register '%b' is intended for the base of the local frame.
  The register '%c' is intended for the current top of the local frame.
  Local frame access can be done through literals with the following instructions.
  rls	reg	lit   	Relative Literal Save		- mem[%c-lit] := reg
  rll	lit	reg   	Relative Literal Load		- reg := mem[%c-lit]
  rla	lit	reg   	Relative Literal Address	- reg := &mem[%c-lit]
  Local frame access can be done through registers with the following instructions.
  rrs	rga	rgb		Relative Register Save		- mem[%c-rgb] := rga
  rrl	rga	rgb		Relative Register Load		- rgb := mem[%c-rga]
  rra	rga	rgb		Relative Register Address	- rgb := &mem[%c-rga]
  rcp	rga	rgb		Relative CoPy				- mem[%c-rgb] := mem[%c-rga]
  Effective memory access can be done with the following instructions.
  sav	rga	rgb		SAVe						- mem[rgb] := rga
  lod	rga	rgb		LOaD						- rgb := mem[rga]
  cpy	rga	rgb		CoPY						- mem[rgb] := mem[rga]
PC022:
  Make a proper debugging mode with support for breakpoints and step by step execution.
  This mode will be initiated with
  govm debug binary [command_line_arguments]
  And it starts in a repl where:
  You can run the file with `run`
  You can restart the repl with `reset`
  You can setup a breakpoint with `bp <count>`
  You can run just one instruction with `n`
  You can see the register %n with `r <n>`
  You can see all registers with  `r`
  You can see the top of the stack with 's'
  You can see the top n values of the stack with 's <n>'
PC025:
  Adds an instruction for swapping.
  swp reg reg Swaps the values of a and b
PC026:
  Implements heap style allocation.
  Heap style allocation can be done with the following instructions.
  hla	lit	rgb		- Heap Literal Allocation	- rgb := &address	(size = lit)
  hra	rga	rgb		- Heap Register Allocation	- rgb := &address	(size = rga)
  hdl	reg			- Heap DeLete				- free(reg)
  Heap value access can be done with the following instructions.
  hld	rga	rgb		- Heap LoaD					- rgb := *rga
  hsv	rga	rgv		- Heap SaVe					- *rgb := rga
  hcp	rga	rgv		- Heap CoPy					- *rgb := *rga
