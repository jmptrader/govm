GoVM
----



	1. VM Instructions



1.1 Dictionary


reg - Register
lit - Literal
add - Code address
dat - Data address

Note that except for hlt being represented by 0.0, no other instruction
has its value specified.
Also, `a` refers to the value of the first argument and `b` refers to the
value of the second argument, whenever applicable.



1.2 Instructions


THIS IS NOT UPDATED, SEE instructions.go FOR MISSING INSTRUCTIONS AND CHECK
THE CHANGES FILE FOR IMPLEMENTED CHANGES WHICH ADD THE NEW INSTRUCTIONS.


hlt
	Halts program execution
nop
	Does nothing.

val	[lit]	[reg]
	Sets b to be equal to a.
mov	[reg]	[reg]
	Sets b to be equal to a.
psh	[reg]
	Pushes a to the top of the stack.
pop	[reg]
	Pops the top of the stack into a.

add	[reg]	[reg]
	Adds a to b.
sub	[reg]	[reg]
	Subtracts a from b.
mul	[reg]	[reg]
	Multiplies a to b.
div	[reg]	[reg]
	Divides b by a.

inc	[reg]
	Increases a by 1.
dec	[reg]
	Decreases a by 1.
flr	[reg]
	Changes a to the highest integer value lower or equal than a.
cel	[reg]
	Changes a to the lowest integer value higher or equal than a.

shw	[reg]
	Prints the a to the standard output.
get	[reg]
	Sets a to whatever is entered into the standard input (if valid).
dsp	[dat]
	Prints the a-th string to the standard output.

cmp	[reg]	[reg]
	If a is less than b, flt is set to true. If a equals b, feq is set
	to true. Otherwise, fgt is set to true. When a flag is set to true
	the other flags are set to false.
cmz	[reg]
	Same behavior as cmp assuming there is a second argument where b
	equals zero.

jmp	[add]
	Jumps to the a-th instruction.
jgt	[add]
	Jumps to the a-th instruction if the fgt flag is set to true.
jeq	[add]
	Jumps to the a-th instruction if the feq flag is set to true.
jlt	[add]
	Jumps to the a-th instruction if the flt flag is set to true.

cll	[add]
	Jumps to the a-th instruction and saves current instruction index
	plus two (the next instruction) into the call stack.
ret
	Let n be the topmost value in the call stack. Jumps to the n-th
	instruction and pops the call stack.

	2. Syntax



2.1 Registers


All registers are written as %n where n is an *integer* referring to the
n-th register.



2.2 Comments


Any text after an instruction and its arguments is a valid comment.
Please mind that str pseudo-instructions consume everything so don't
comment on those lines.

Examples:

nop Hey jude.
add %0	%1 Don't say goodbye.



2.3 Jump statements

Label syntax is specified by PC006.

Jump syntax basically works as `j** <labelname>`.

Label redefinition is specified by PC002.
Undefined labels behavior is specified by PC014.

Also, jumps to labels that preceed no instruction is currently undefined behavior.

2.4 Constant strings

String syntax also has special pseudo-instructions. 

str	<name>	...

Basically sets <name> to represent the index a string made of every word after
it's name but separated by a space.
I don't know what happens if there's nothing but whitespace after <name>, since
I have not implemented this yet. PS: It's just newline.
To display a string, you use

dsp	<name>

so that you don't have to know by heart all of the string indexes.
The <name> used in a dsp instruction has to be already declared by a str.
If you don't it will be actually set as 0, so as long as you defined at
least one string, the first one will be defaulted to.

2.5 Multiple files


See PC004 in CHANGES for reference.
Example of this:
./govm compile examples/fibonacci/fib examples/fibonacci/main.gs examples/fibonacci/fib.gs
./govm examples/fibonacci/fib 20

2.6 Command Line Arguments


See PC008 in CHANGES for reference.
